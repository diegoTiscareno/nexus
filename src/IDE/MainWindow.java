/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package IDE;


import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.IIOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.undo.AbstractUndoableEdit;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import javax.swing.undo.UndoableEdit;
import tiny.Main;
import tiny.TinyLexico;
import tiny.TinySemantico;
import tiny.TinySintaxis;
import tiny.Token;


/**
 *
 * @author diego
 */
public class MainWindow extends javax.swing.JFrame implements CaretListener,
        DocumentListener, UndoableEditListener{

    UndoManager undo= new UndoManager();
    boolean changed=false;
    int noComents= 0;
    File currentFile=null;
    String IDEName= "Nexus IDE 0.1";
    String TinyPath ="/home/diego/Tiny.jar";
    static final String caracter= "[a-zA-Z]";
    static final String numero="\\-?\\+?[0-9]+(\\.[0-9]+)?(e\\-?\\+?[0-9]+)?";
    static final String alfanum="[0-9a-zA-Z]";
    static final String comentarios= "/\\*(.|\n)*\\*/";
    static final String comentariosLinea= "//(.*)\n";
    static final String reserved="if|then|else|end|do|until|while|cout|cin|int|real|main|void|bool";
    static final String identifier="([A-Za-z][A-Za-z0-9]*)";
    
    
    Pattern patternNum=Pattern.compile(numero);
    Pattern patternReserved= Pattern.compile(reserved);
    Pattern patternIdentifier= Pattern.compile(identifier);
    Pattern patternComents=Pattern.compile(comentarios);
    Pattern patternLineComents=Pattern.compile(comentariosLinea);
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.updateTitle();
        //Adding listeners
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                int change=-1;
                if (changed){
                    change= JOptionPane.showOptionDialog(rootPane, "Antes de cerrar, Â¿Desea guardar los cambios en " 
                            + ((currentFile==null)? "el nuevo archivo?": (currentFile.getName() + "?")),
                            "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                }
                switch (change){
                    case -1:
                        System.exit(0); 
                        break;
                    case 0:
                        menuItemGuardarActionPerformed(null);
                        System.exit(0);
                        break;
                    case 1:
                        System.exit(0);
                        break;

                }
            }
        });      
        AbstractDocument doc;
        TextLineNumber tln;
        StyledDocument styledDoc = textPane.getStyledDocument();
        if (styledDoc instanceof AbstractDocument) {
            doc = (AbstractDocument)styledDoc;
            doc.addUndoableEditListener(this);
            doc.addDocumentListener(this);
        } else {
            System.err.println("Text pane's document isn't an AbstractDocument!");
            System.exit(-1);
        }
        //Finished adding listeners
        tln= new TextLineNumber(textPane);
        jScrollPane1.setRowHeaderView(tln);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUp = new javax.swing.JPopupMenu();
        popItemCopiar = new javax.swing.JMenuItem();
        popItenPegar = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        toolBarNuevo = new javax.swing.JButton();
        toolBarAbrir = new javax.swing.JButton();
        toolBarGuardar = new javax.swing.JButton();
        toolBarCerrar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        toolBoxCompilar = new javax.swing.JButton();
        statusPane = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textErrores = new javax.swing.JTextArea();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textLexico = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        arbolSintactico = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        arbolSemantico = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemNuevo = new javax.swing.JMenuItem();
        menuItemAbrir = new javax.swing.JMenuItem();
        menuItemGuardar = new javax.swing.JMenuItem();
        meuItemGuardarComo = new javax.swing.JMenuItem();
        menuItemCerrar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuItemDeshacer = new javax.swing.JMenuItem();
        menuItemRehacer = new javax.swing.JMenuItem();

        popItemCopiar.setMnemonic('C');
        popItemCopiar.setText("Copiar");
        popItemCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popItemCopiarActionPerformed(evt);
            }
        });
        popUp.add(popItemCopiar);

        popItenPegar.setText("Pegar");
        popItenPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popItenPegarActionPerformed(evt);
            }
        });
        popUp.add(popItenPegar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jToolBar1.setRollover(true);

        toolBarNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IDE/Document Blank.png"))); // NOI18N
        toolBarNuevo.setToolTipText("Nuevo");
        toolBarNuevo.setFocusable(false);
        toolBarNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarNuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarNuevo);

        toolBarAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IDE/Folder Open.png"))); // NOI18N
        toolBarAbrir.setToolTipText("Abrir");
        toolBarAbrir.setFocusable(false);
        toolBarAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarAbrirActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarAbrir);

        toolBarGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IDE/Files.png"))); // NOI18N
        toolBarGuardar.setToolTipText("Guardar");
        toolBarGuardar.setFocusable(false);
        toolBarGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarGuardar);

        toolBarCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IDE/Close.png"))); // NOI18N
        toolBarCerrar.setToolTipText("Cerrar");
        toolBarCerrar.setFocusable(false);
        toolBarCerrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarCerrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarCerrarActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarCerrar);
        jToolBar1.add(jSeparator1);

        toolBoxCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IDE/Clipboard.png"))); // NOI18N
        toolBoxCompilar.setToolTipText("Compilar");
        toolBoxCompilar.setFocusable(false);
        toolBoxCompilar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBoxCompilar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBoxCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBoxCompilarActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBoxCompilar);

        statusPane.setAutoscrolls(true);

        status.setText("Wellcome");

        javax.swing.GroupLayout statusPaneLayout = new javax.swing.GroupLayout(statusPane);
        statusPane.setLayout(statusPaneLayout);
        statusPaneLayout.setHorizontalGroup(
            statusPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statusPaneLayout.setVerticalGroup(
            statusPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPaneLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(status)
                .addContainerGap())
        );

        textErrores.setEditable(false);
        textErrores.setColumns(20);
        textErrores.setRows(5);
        jScrollPane2.setViewportView(textErrores);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Errores", jPanel7);

        jSplitPane1.setDividerLocation(450);

        textPane.setAutoscrolls(false);
        textPane.setComponentPopupMenu(popUp);
        jScrollPane1.setViewportView(textPane);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jTabbedPane1.setAutoscrolls(true);

        textLexico.setEditable(false);
        textLexico.setColumns(20);
        textLexico.setRows(5);
        jScrollPane4.setViewportView(textLexico);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("LÃ©xico", jPanel2);

        jScrollPane3.setViewportView(arbolSintactico);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("SintÃ¡ctico", jPanel3);

        jScrollPane5.setViewportView(arbolSemantico);

        jTabbedPane1.addTab("SemÃ¡ntico", jScrollPane5);

        jSplitPane1.setRightComponent(jTabbedPane1);

        jMenu1.setMnemonic('A');
        jMenu1.setText("Archivo");

        menuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNuevo.setMnemonic('N');
        menuItemNuevo.setText("Nuevo");
        menuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemNuevo);

        menuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAbrir.setMnemonic('A');
        menuItemAbrir.setText("Abrir...");
        menuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemAbrir);

        menuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemGuardar.setMnemonic('G');
        menuItemGuardar.setText("Guardar");
        menuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemGuardar);

        meuItemGuardarComo.setMnemonic('C');
        meuItemGuardarComo.setText("Guardar Como...");
        meuItemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meuItemGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(meuItemGuardarComo);

        menuItemCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuItemCerrar.setMnemonic('r');
        menuItemCerrar.setText("Cerrar");
        menuItemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCerrarActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemCerrar);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('E');
        jMenu2.setText("Editar");

        menuItemDeshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuItemDeshacer.setMnemonic('D');
        menuItemDeshacer.setText("Deshacer");
        menuItemDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeshacerActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemDeshacer);

        menuItemRehacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuItemRehacer.setMnemonic('R');
        menuItemRehacer.setText("Rehacer");
        menuItemRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRehacerActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemRehacer);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane2))
                    .addComponent(jSplitPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeshacerActionPerformed
        try {
                undo.undo();
            } catch (CannotUndoException ex) {
                System.out.println("Unable to undo: " + ex.getMessage());
                //ex.printStackTrace();
            }
    }//GEN-LAST:event_menuItemDeshacerActionPerformed

    private void menuItemRehacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRehacerActionPerformed
        try {
                undo.redo();
            } catch (CannotRedoException ex) {
                System.out.println("Unable to redo: " + ex.getMessage());
                //ex.printStackTrace();
            }
    }//GEN-LAST:event_menuItemRehacerActionPerformed

    private void menuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAbrirActionPerformed
        int change=-1;
        if (changed){
            change= JOptionPane.showOptionDialog(rootPane, "Antes de abrir, Â¿Desea guardar los cambios en " 
                    + ((currentFile==null)? "el nuevo archivo?": (currentFile.getName() + "?")),
                    "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        }
        switch (change){
            case -1:
                this.openFile();
                break;
            case 0:
                this.menuItemGuardarActionPerformed(evt);
                this.openFile();
                break;
            case 1:
                this.openFile();
                break;
        }
        
    }//GEN-LAST:event_menuItemAbrirActionPerformed

    private void meuItemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meuItemGuardarComoActionPerformed
        JFileChooser chooser= new JFileChooser();
        File file;
        int disp, opt=0;
        
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setFileFilter(new ExtensionFileFilter("c", "Archivos C"));
        chooser.setFileFilter(new ExtensionFileFilter("cpp", "Archivos C++"));
        chooser.setFileFilter(new ExtensionFileFilter("h", "Archivos de cabezera C/C++"));
        chooser.setFileFilter(new ExtensionFileFilter("tpp", "Archivos Tiny++"));

        disp= chooser.showSaveDialog(null);
        if(disp==JFileChooser.APPROVE_OPTION){
            if(!chooser.getSelectedFile().getPath().endsWith("." + chooser.getFileFilter())){
                file=new File(chooser.getSelectedFile().getPath() + "." + chooser.getFileFilter());
            }else{
                file= chooser.getSelectedFile();
            }
            if(file.exists()){
               opt= JOptionPane.showOptionDialog(rootPane, "El archivo ya existe, Â¿Desea sobreescribirlo?",
                        "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            }
            if(opt==0){
                this.saveFile(file);
            }
        }
    }//GEN-LAST:event_meuItemGuardarComoActionPerformed

    private void menuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGuardarActionPerformed
        if(currentFile==null){
            meuItemGuardarComoActionPerformed(evt);
        }else{
            this.saveFile(currentFile);
        }
    }//GEN-LAST:event_menuItemGuardarActionPerformed

    private void toolBarGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarGuardarActionPerformed
        menuItemGuardarActionPerformed(evt);
    }//GEN-LAST:event_toolBarGuardarActionPerformed

    private void menuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNuevoActionPerformed
        int change=-1;
                if (changed){
                    change= JOptionPane.showOptionDialog(rootPane, ((currentFile==null)? "El Archivo nuevo": (currentFile.getName() )) 
                            + " ha sido modificado, Â¿Guardar cambios?",
                            "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                }
                switch (change){
                    case 0:
                        menuItemGuardarActionPerformed(null);
                        try{
                            textPane.getStyledDocument().remove(0, textPane.getStyledDocument().getLength());
                            updateTitle();
                            currentFile=null;
                            status.setText("Nuevo Archivo");
                        }catch(BadLocationException ble){
                            status.setText("OperaciÃ³n fallida");
                        }
                        break;
                    case 1:
                        try{
                            textPane.getStyledDocument().remove(0, textPane.getStyledDocument().getLength());
                            updateTitle();
                            currentFile=null;
                            status.setText("Nuevo Archivo");
                        }catch(BadLocationException ble){
                            status.setText("OperaciÃ³n fallida");
                        }
                        break;
                    case 2:
                        break;

                }
                
               
                
    }//GEN-LAST:event_menuItemNuevoActionPerformed

    private void toolBarAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarAbrirActionPerformed
        menuItemAbrirActionPerformed(evt);
    }//GEN-LAST:event_toolBarAbrirActionPerformed

    private void toolBarNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarNuevoActionPerformed
        menuItemNuevoActionPerformed(evt);
    }//GEN-LAST:event_toolBarNuevoActionPerformed

    private void popItemCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popItemCopiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popItemCopiarActionPerformed

    private void popItenPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popItenPegarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popItenPegarActionPerformed

    private void menuItemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCerrarActionPerformed
        int change=-1;
                if (changed){
                    change= JOptionPane.showOptionDialog(rootPane, ((currentFile==null)? "El Archivo nuevo": (currentFile.getName() )) 
                            + " ha sido modificado, Â¿Guardar cambios?",
                            "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                }
                if (change == 0){
                    this.menuItemGuardarActionPerformed(evt);
                }
                if (change != 2){
                    try{
                        textPane.getStyledDocument().remove(0, textPane.getStyledDocument().getLength());
                        updateTitle();
                        currentFile=null;
                        status.setText("Nuevo Archivo");
                    }catch(BadLocationException ble){
                        status.setText("OperaciÃ³n fallida");
                    }
                }
    }//GEN-LAST:event_menuItemCerrarActionPerformed

    private void toolBarCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarCerrarActionPerformed
        menuItemCerrarActionPerformed(evt);
    }//GEN-LAST:event_toolBarCerrarActionPerformed

    private void toolBoxCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBoxCompilarActionPerformed
        TinyLexico tl;
        TinySintaxis ts;
        TinySemantico tsem;
        List listalex, listalexError;
        Token tok;
        DefaultMutableTreeNode node;
        try {
            textErrores.setText("");
            textErrores.setText("");
            textErrores.setText("");
            textLexico.setText("");
            this.menuItemGuardarActionPerformed(evt);
            tl = new TinyLexico(currentFile);
            listalex = new ArrayList();
            listalexError = new ArrayList();
            do {
                tok = tl.next();
                if (tok.getTipoToken() == Token.TipoToken.ERROR) {
                    listalexError.add(tok);
                } else {
                    listalex.add(tok);
                }
            } while (tok.getTipoToken() != tiny.Token.TipoToken.EOF);
            
            if (!listalexError.isEmpty()) {
                
                textErrores.append("+++Errores Lexicos: \n\n");
                
                for (int i = 0; i < listalexError.size(); i++) {
                    textErrores.append(listalexError.get(i).toString() + "\n");
                }
            } else {
                
                for (int i = 0; i < listalex.size(); i++) {
                    textLexico.append(listalex.get(i).toString() + "\n");
                }
                ts = new TinySintaxis(listalex);
                ts.analize();
                node = ts.getRaiz();
                arbolSintactico.setModel(new DefaultTreeModel(node)); 
                if (!ts.getListaErrores().isEmpty()) {
                    
                    textErrores.append("+++Errores Sintacticos: \n\n");
                
                    for (int i = 0; i < ts.getListaErrores().size(); i++) {
                        textErrores.append(ts.getListaErrores().get(i).toString() + "\n");
                    }
                } else {
                    tsem = new TinySemantico(ts.getRaiz());
                    tsem.analyze();
                    arbolSemantico.setModel(new DefaultTreeModel(tsem.getArbolSemantico())); 
                    System.out.println("Errores semanticos: " + tsem.getListaErrores());
                    if (!tsem.getListaErrores().isEmpty()) {
                        textErrores.append("+++Errores Semanticos: \n\n");
                        for (int i = 0; i < ts.getListaErrores().size(); i++) {
                            textErrores.append(tsem.getListaErrores().get(i).toString() + "\n");
                        }
                    }
                }
            }
            
            
            status.setText("Hecho");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            status.setText("OperaciÃ³n fallida");
        }
    }//GEN-LAST:event_toolBoxCompilarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the system lookAndFeel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        
         try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolSemantico;
    private javax.swing.JTree arbolSintactico;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem menuItemAbrir;
    private javax.swing.JMenuItem menuItemCerrar;
    private javax.swing.JMenuItem menuItemDeshacer;
    private javax.swing.JMenuItem menuItemGuardar;
    private javax.swing.JMenuItem menuItemNuevo;
    private javax.swing.JMenuItem menuItemRehacer;
    private javax.swing.JMenuItem meuItemGuardarComo;
    private javax.swing.JMenuItem popItemCopiar;
    private javax.swing.JMenuItem popItenPegar;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JLabel status;
    private javax.swing.JPanel statusPane;
    private javax.swing.JTextArea textErrores;
    private javax.swing.JTextArea textLexico;
    private javax.swing.JTextPane textPane;
    private javax.swing.JButton toolBarAbrir;
    private javax.swing.JButton toolBarCerrar;
    private javax.swing.JButton toolBarGuardar;
    private javax.swing.JButton toolBarNuevo;
    private javax.swing.JButton toolBoxCompilar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void caretUpdate(CaretEvent e) {
        
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        changed=true;
        status.setText("Editando");
        colorize(e.getOffset(), e.getLength());
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        changed=true;
        status.setText("Editando");
        colorize(e.getOffset(), e.getLength());
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
//        changed=true;
//        colorize(e.getOffset(), e.getLength());
    }

    @Override
    public void undoableEditHappened(UndoableEditEvent e) {
        if(!e.getEdit().getPresentationName().equals("cambio de estilo")){

            undo.addEdit(e.getEdit());
            //System.out.println("Something undoable happended");
        }
    }
    
    public void updateTitle(){
        if(currentFile==null){
            this.setTitle("Nuevo" + " - " + IDEName);
        }
        else{
            this.setTitle(currentFile.getName() + " - " +IDEName);
        }
    }
    
    public void updateMenus(String msgRedo, String msgUndo, boolean canRedo, boolean canUndo){
        if(canUndo){
            this.menuItemDeshacer.setEnabled(true);
            this.menuItemDeshacer.setText("Deshacer "+msgUndo);
            
        }
        else{
            this.menuItemDeshacer.setText("Deshacer");
            this.menuItemDeshacer.setEnabled(false);
        }
        if(canRedo){
            this.menuItemRehacer.setEnabled(true);
            this.menuItemRehacer.setText("Rehacer "+msgRedo);
            
        }
        else{
            this.menuItemDeshacer.setText("Rehacer");
            this.menuItemDeshacer.setEnabled(false);
        }

    }
    
    
    public void saveFile(File file){
        FileWriter fw;
        PrintWriter pw;
        StringBuffer sb=new StringBuffer();
        currentFile=file;
        status.setText("Guardando...");
        try{
            sb.append(textPane.getStyledDocument().getText(0, textPane.getStyledDocument().getLength()));
            if(currentFile.exists()){
                System.out.println(currentFile + " se sobreescribirÃ¡");
                if(!currentFile.delete()){
                    throw new IIOException("el archivo no puede ser sobre escrito.");
                }                     
            }else{
                System.out.println(currentFile + " se crearÃ¡");
            }
            fw= new FileWriter(currentFile);
            pw= new PrintWriter(fw);
            pw.print(sb);
            fw.close();
            changed=false;
            this.updateTitle();
            status.setText("Guardado " + currentFile.getAbsolutePath());
        }catch(SecurityException se){
            JOptionPane.showMessageDialog(rootPane, "Error al guardar el archivo: " + se.getLocalizedMessage()
                    , "Error", JOptionPane.ERROR_MESSAGE);
        }catch(IOException ioe){
            JOptionPane.showMessageDialog(rootPane, "Error al guardar el archivo: " + ioe.getLocalizedMessage()
                    , "Error", JOptionPane.ERROR_MESSAGE);
        }catch(BadLocationException ble){
            JOptionPane.showMessageDialog(rootPane, "Error al guardar el archivo: " + ble.getLocalizedMessage()
                    , "Error", JOptionPane.ERROR_MESSAGE);
        }
    
    }
    
    public void openFile(){
        status.setText("Abriendo Archivo...");
        JFileChooser chooser= new JFileChooser();
        int disp;
       
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setFileFilter(new ExtensionFileFilter("c", "Archivos C"));
        chooser.setFileFilter(new ExtensionFileFilter("cpp", "Archivos C++"));
        chooser.setFileFilter(new ExtensionFileFilter("h", "Archivos de cabezera C/C++"));
        chooser.setFileFilter(new ExtensionFileFilter("tpp", "Archivos Tiny++"));
        
        disp= chooser.showOpenDialog(null);
        if(disp==JFileChooser.APPROVE_OPTION){
            String filePath = chooser.getSelectedFile().getPath();
                try {
                    FileInputStream fr = new FileInputStream(filePath);

                    InputStreamReader isr = new InputStreamReader(fr, "UTF-8");
                    BufferedReader reader = new BufferedReader(isr);
                    StringBuffer buffer = new StringBuffer();

                    String line = null;
                    while ((line = reader.readLine()) != null) {   
                        buffer.append(line +'\n');
                    }
                    buffer.deleteCharAt(buffer.length()-1);
                    reader.close();

                    textPane.setText(buffer.toString());
                    changed=false;
                    currentFile=chooser.getSelectedFile();
                    this.updateTitle();
                    status.setText(chooser.getSelectedFile().getAbsolutePath());
                } catch (IOException e) {
                        JOptionPane.showMessageDialog(rootPane, "Error al intentar abrir el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
        }
    }
    
    void colorize(final int offset, final int lenght){
        SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
                            int newOffset, newLenght, index;
                            String line;
                            String lineWords[];
                            TokenAt token=null;
                            ArrayList<TokenAt> lista = new ArrayList<>();
                            ArrayList<TokenAt> listaNums = new ArrayList<>();
                            ArrayList<TokenAt> listaComs = new ArrayList<>();
                            Style style;
                            
                            Matcher matcherNum;
                            Matcher matcherReserved;
                            Matcher matcherIdentifier;
                            Matcher matcherComents;
                            Matcher matcherLineComents;
                            
                            newOffset=offset;
                            newLenght=lenght;
                            try{
                                while(!textPane.getStyledDocument().getText(newOffset-1,1).equals("\n")){
                                    newOffset--;
                                }
                                
                            }catch(BadLocationException ble){
                                System.out.println("Bad Location offset " + newOffset);
                            }
                            try{
                                while(!textPane.getStyledDocument().getText(newOffset+newLenght,1).equals("\n")){
                                    newLenght++;
                                }
                                if(textPane.getStyledDocument().getText(offset, lenght).equals("\n")){
                                    newLenght++;
                                    while(!textPane.getStyledDocument().getText(newOffset+newLenght,1).equals("\n")){
                                        newLenght++;
                                    } 
                                }
                            }
                            catch(BadLocationException ble){
                                System.out.println("Bad Location lenght " + newLenght);
                            }
                            try{
                                line= textPane.getStyledDocument().getText(newOffset,newLenght);
                                //System.out.println(line);
                                style=textPane.addStyle("Black", null);
                                StyleConstants.setForeground(style, Color.black);
                                textPane.getStyledDocument().setCharacterAttributes(0, textPane.getStyledDocument().getLength(), style , true);
/*
 * Primer Intento de colorear las palabras.
 * Fallido
 */
                                
//                                lineWords=line.split("[^a-z^A-Z^0-9]");
//                                System.out.println(lineWords.length);
//                                for (int i = 0; i < lineWords.length; i++) {
//                                    System.out.println(lineWords[i]);
//                                    if (lineWords[i].matches(reserved)) {
//                                        index=line.indexOf(lineWords[i]);
//                                        token= new TokenAt(index, lineWords[i].length());
//                                        lista.add(token);
//                                    } else if(lineWords[i].matches(numero)){
//                                        index=line.indexOf(lineWords[i]);
//                                        token=new TokenAt(index, lineWords[i].length());
//                                        listaNums.add(token);
//                                    }else if(lineWords[i].matches(comentarios)){
//                                        index=line.indexOf(lineWords[i]);
//                                        token=new TokenAt(index, lineWords[i].length());
//                                        listaComs.add(token);
//                                    }
//                                }
//                                System.out.println(lista + ", " + listaNums); 
//                                if(token!=null){
//                                    for (int i = 0; i < lista.size(); i++) {
//                                        style=textPane.addStyle("Red", null);
//                                        StyleConstants.setForeground(style, Color.red);
//                                        textPane.getStyledDocument().setCharacterAttributes(lista.get(i).getTokenAt()+newOffset, 
//                                                lista.get(i).getTokenEnd(), style, true);
//                                    }
//                                    for (int i = 0; i < listaNums.size(); i++) {
//                                        style=textPane.addStyle("Blue", null);
//                                        StyleConstants.setForeground(style, Color.blue);
//                                        textPane.getStyledDocument().setCharacterAttributes(listaNums.get(i).getTokenAt()+newOffset, 
//                                                listaNums.get(i).getTokenEnd(), style, true);
//                                    }
//                                    for (int i = 0; i < listaComs.size(); i++) {
//                                        style=textPane.addStyle("Gray", null);
//                                        StyleConstants.setForeground(style, Color.lightGray);
//                                        textPane.getStyledDocument().setCharacterAttributes(listaComs.get(i).getTokenAt()+newOffset, 
//                                                listaComs.get(i).getTokenEnd(), style, true);
//                                    }
//                                }
 /*
  * Segundo Intento de colorear las palabras
  * Un poco menos fallido que el anterior
  */
                                
//                                matcherNum=patternNum.matcher(line);
//                                matcherReserved=patternReserved.matcher(line);
//                                matcherIdentifier=patternIdentifier.matcher(line);
//                                matcherComents=patternComents.matcher(textPane.getStyledDocument().getText(0, textPane.getStyledDocument().getLength()));
//                                matcherLineComents=patternComents.matcher(textPane.getStyledDocument().getText(0, textPane.getStyledDocument().getLength()));
//                                
//                                while(matcherNum.find()){
//                                    style=textPane.addStyle("Red", null);
//                                    StyleConstants.setForeground(style, Color.red);
//                                    textPane.getStyledDocument().setCharacterAttributes(matcherNum.start()+newOffset,
//                                            matcherNum.end()- matcherNum.start(), style, true);
//                                }
//                                while(matcherIdentifier.find()){
//                                    style=textPane.addStyle("Black", null);
//                                    StyleConstants.setForeground(style, Color.black);
//                                    textPane.getStyledDocument().setCharacterAttributes(matcherIdentifier.start()+newOffset,
//                                            matcherIdentifier.end()- matcherIdentifier.start(), style, true);
//                                }
//
//                                while(matcherReserved.find()){
//                                    style=textPane.addStyle("Blue", null);
//                                    StyleConstants.setForeground(style, Color.blue);
//                                    textPane.getStyledDocument().setCharacterAttributes(matcherReserved.start()+newOffset,
//                                            matcherReserved.end()- matcherReserved.start(), style, true);
//                                }
//                                while(matcherComents.find()){
//                                    style=textPane.addStyle("Gray", null);
//                                    StyleConstants.setForeground(style, Color.lightGray);
//                                    textPane.getStyledDocument().setCharacterAttributes(matcherComents.start(),
//                                            matcherComents.end()- matcherComents.start(), style, true);
//                                }
//                                while(matcherLineComents.find()){
//                                    style=textPane.addStyle("Gray", null);
//                                    StyleConstants.setForeground(style, Color.lightGray);
//                                    textPane.getStyledDocument().setCharacterAttributes(matcherLineComents.start(),
//                                            matcherLineComents.end(), style, true);
//                                    System.out.println("nooo");
//                                }

/*
 * Tercer Intento de pintar las palabras
 * anÃ¡lisis lexicogrÃ¡fico
 * rescata la idea del primer intento pero con la ventaja del 
 * posicionamiento lexicogrÃ¡fico
 */                             //TinyLexico tl = new TinyLexico(line);
                                TinyColor tl = new TinyColor(textPane.getStyledDocument().getText(0, textPane.getStyledDocument().getLength()));
                                ArrayList<ColorToken> tokens = new ArrayList<>();
                                ColorToken aux;
                                int newNoComents = 0;
                                float[] color = new float[3];
                                boolean comentarios = false;
                                do {
                                    aux = tl.next();
                                    //System.out.println(aux);
                                    tokens.add(aux);
                                } while (!aux.isEofToken());
                                for (int i = 0; i < tokens.size(); i++) {
                                    if (ColorToken.isReservedWord(tokens.get(i).getLexema())){
                                        style=textPane.addStyle("Blue", null);
                                        StyleConstants.setForeground(style, Color.blue);
                                        textPane.getStyledDocument().setCharacterAttributes(tokens.get(i).getIndex() /*+newOffset*/,
                                                tokens.get(i).getLexema().length(), style, true);
                                    } if (tokens.get(i).getTipoToken() == ColorToken.TipoToken.LINE_COMMENT){
                                        style=textPane.addStyle("Gray", null);
                                        StyleConstants.setForeground(style, Color.LIGHT_GRAY);
                                        textPane.getStyledDocument().setCharacterAttributes(tokens.get(i).getIndex() /*+newOffset*/,
                                                tokens.get(i).getLexema().length(), style, true);
                                    } if (tokens.get(i).getTipoToken() == ColorToken.TipoToken.NUMBER){
                                        style=textPane.addStyle("green", null);
                                        Color.RGBtoHSB(60, 179, 113, color);
                                        StyleConstants.setForeground(style, Color.getHSBColor(color[0], color[1], color[2]));
                                        textPane.getStyledDocument().setCharacterAttributes(tokens.get(i).getIndex() /*newOffset*/,
                                                tokens.get(i).getLexema().length(), style, true);
                                    } if (tokens.get(i).getTipoToken() == ColorToken.TipoToken.LEFT_CURLY ||
                                            tokens.get(i).getTipoToken() == ColorToken.TipoToken.LEFT_PARENS ||
                                            tokens.get(i).getTipoToken() == ColorToken.TipoToken.RIGHT_CURLY ||
                                            tokens.get(i).getTipoToken() == ColorToken.TipoToken.RIGHT_PARENS ){
                                        style=textPane.addStyle("purple", null);
                                        Color.RGBtoHSB(0, 139, 139, color);
                                        StyleConstants.setForeground(style, Color.getHSBColor(color[0], color[1], color[2]));
                                        textPane.getStyledDocument().setCharacterAttributes(tokens.get(i).getIndex() /*+newOffset*/,
                                                tokens.get(i).getLexema().length(), style, true);
                                    } 
                                }

                                matcherComents=patternComents.matcher(textPane.getStyledDocument().getText(0, textPane.getStyledDocument().getLength()));
                                while(matcherComents.find()){
                                    style=textPane.addStyle("Gray", null);
                                    StyleConstants.setForeground(style, Color.lightGray);
                                    textPane.getStyledDocument().setCharacterAttributes(matcherComents.start(),
                                    matcherComents.end()- matcherComents.start(), style, true);
                                    newNoComents++;
                                }
                                
                                tl.cerrarArchivo();
                            }
                            catch(BadLocationException ble){
                                System.out.println("Bad Location painting ");
                            }
                            
                        }//end Run
                            
		});
    }
    

}
